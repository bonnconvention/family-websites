<?php

include_once 'cms_odata.features.inc';
module_load_include('inc', 'cms_odata', 'includes/cms_odata.utils');

/**
 * Implements hook_entity_info().
 */
function cms_odata_entity_info(){
  $info = array();

  $info['odata_focal_point'] = array(
    'label' => t('Focal point (OData)'),
    'base table' => 'odata_focal_point',
    'entity keys' => array(
      'id' => 'id'
    ),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'fieldable' => TRUE,
    'views controller class' => 'NFPViewsController',
  );

  return $info;
}

/**
 * Implementation of hook_cron().
 */

function cms_odata_cron() {
  $cron_last = variable_get('cron_last');
  $instance_name = CMSUtils::get_current_profile();

  $filters = array(
    'instruments' => array(ODATA_CMS_INSTRUMENT),
    'status_person' => array(ODATA_CMS_STATUS_PERSON)
  );

  if (date('ymd', $cron_last) != date('ymd', time())) {
    switch ($instance_name) {
      case 'aewa':
        $filters = array(
          'instruments' => array(ODATA_AEWA_INSTRUMENT),
          'status_person' => array(ODATA_AEWA_STATUS_PERSON)
        );
        break;
      case 'ascobans':
        $filters = array(
          'instruments' => array(ODATA_ASCOBANS_INSTRUMENT),
          'status_person' => array(ODATA_ASCOBANS_STATUS_PERSON)
        );
        break;
    }

    $focal_points = get_ldap_contacts($filters);

    if (!empty($focal_points)) {
      $deleted = 0;
      // remove all the data
      $existing = entity_load('odata_focal_point');
      $obsolete_ids = [];
      $existing_by_dn = [];
      foreach($existing as $id => $row) {
        $existing_by_dn[$row->dn] = $row;
        if (!array_key_exists($row->dn, $focal_points)) {
          $obsolete_ids[] = $id;
        }
      }
      if (!empty($obsolete_ids)) {
        $deleted = count($obsolete_ids);
        entity_delete_multiple('odata_focal_point', $obsolete_ids);
      }

      $field_mappings = array(
        'dn' => 'dn',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'position' => 'position',
        'address' => 'address',
        'country' => 'country_rendered',
        'country_iso2' => 'country',
        'organization' => 'organization',
        'country_post' => 'country_post_rendered',
        'country_post_iso2' => 'country_post',
        'work_email' => 'work_email',
        'telephone' => 'telephone',
        'fax' => 'fax',
        'instruments' => 'instruments_rendered',
        'status_person' => 'statusperson_rendered',
        'title' => 'title'
      );

      // add new results
      $updated = 0;
      $new = 0;
      foreach($focal_points as $dn => $fp) {
        $save = FALSE;
        $record_exists = array_key_exists($dn, $existing_by_dn);
        if ($record_exists) {
          $entity = $existing_by_dn[$dn];
        }
        else {
          // New records always will be saved
          $new++;
          $save = TRUE;
          $entity = entity_create('odata_focal_point', array());
        }
        // Copy destination to source and decide if needs saving
        foreach ($field_mappings as $field_name_dest => $field_name_source) {
          if ($record_exists && ($entity->{$field_name_dest} != $fp->{$field_name_source})) {
            $save = TRUE;
          }
          $entity->{$field_name_dest} = $fp->{$field_name_source};
        }
        if ($save) {
          if ($record_exists) {
            $updated++;
          }
          $entity->save();
        }
      }
      watchdog(
        'cms_odata',
        'Sync completed: @count_n created, @count_u updated and @count_d contacts deleted',
        array(
          '@count_n' => $new,
          '@count_u' => $updated,
          '@count_d' => $deleted,
        ),
        WATCHDOG_NOTICE
      );
      if (module_exists('cms_varnish')) {
        $urls = array('national-focal-points');
        cms_varnish_purge_urls($urls);
      }

      watchdog('info', 'Successfully updated ldap users for odata on '.$instance_name.'.');
    } else {
      watchdog('warning', 'No ldap users retreived for odata '.$instance_name.'.');
    }
  }
}
