diff --git pathauto.install pathauto.install
index 753725a..4facee1 100644
--- pathauto.install
+++ pathauto.install
@@ -8,6 +8,39 @@
  */
 
 /**
+ * Implements hook_schema().
+ */
+function pathauto_schema() {
+  $schema['pathauto'] = array(
+    'description' => '',
+    'fields' => array(
+      'entity_type' => array(
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => TRUE,
+        'description' => 'An entity type.',
+      ),
+      'entity_id' => array(
+        'type' => 'int',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+        'description' => 'An entity ID.',
+      ),
+      'pathauto' => array(
+        'type' => 'int',
+        'size' => 'tiny',
+        'not null' => TRUE,
+        'default' => 0,
+        'description' => 'The automatic alias status of the entity.',
+      ),
+    ),
+    'primary key' => array('entity_type', 'entity_id'),
+  );
+
+  return $schema;
+}
+
+/**
  * Implements hook_install().
  */
 function pathauto_install() {
@@ -134,6 +167,75 @@ function pathauto_update_7004() {
 }
 
 /**
+ * Create the pathauto table for storing path alias status.
+ */
+function pathauto_update_7006(&$sandbox) {
+  // Do not recreate if already existing from a D6 site.
+  if (db_table_exists('pathauto')) {
+    return;
+  }
+
+  drupal_load('module', 'pathauto');
+  module_load_include('inc', 'pathauto');
+
+  if (!isset($sandbox['progress'])) {
+    // Create the new table.
+    $table = array(
+      'description' => '',
+      'fields' => array(
+        'entity_type' => array(
+          'type' => 'varchar',
+          'length' => 128,
+          'not null' => TRUE,
+          'description' => 'An entity type.',
+        ),
+        'entity_id' => array(
+          'type' => 'int',
+          'unsigned' => TRUE,
+          'not null' => TRUE,
+          'description' => 'An entity ID.',
+        ),
+        'pathauto' => array(
+          'type' => 'int',
+          'size' => 'tiny',
+          'not null' => TRUE,
+          'default' => 0,
+          'description' => 'The automatic alias status of the entity.',
+        ),
+      ),
+      'primary key' => array('entity_type', 'entity_id'),
+    );
+    db_create_table('pathauto', $table);
+
+    // Initialize the defaults for populating the table with Batch API.
+    $sandbox['progress'] = 0;
+    $sandbox['last_nid_processed'] = 0;
+    $sandbox['max'] = db_query("SELECT COUNT(*) FROM {node}")->fetchField();
+  }
+
+  // Populate the pathauto table 50 nodes at a time.
+  $result = db_query("SELECT nid FROM {node} WHERE nid > :nid LIMIT 50", array(':nid' => $sandbox['last_nid_processed']))->fetchAllAssoc('nid');
+  foreach ($result as $row) {
+    $node = node_load($row->nid);
+    $pattern = pathauto_pattern_load_by_entity('node', $node->type, $node->language);
+    if ($pattern) {
+      $uri = entity_uri('node', $node);
+      $path = drupal_get_path_alias($uri['path'], $language);
+      $pathauto_alias = pathauto_create_alias('node', 'return', $uri['path'], array('node' => $node), $node->type, $node->language);
+      $node->path['pathauto'] = $path != $uri['path'] && $path == $pathauto_alias;
+      db_query("INSERT INTO {pathauto} (entity_type, entity_id, pathauto) VALUES (:entity_type, :entity_id, :pathauto)", array(':entity_type' => 'node', ':entity_id' => $node->nid, ':pathauto' => $node->path['pathauto']));
+    }
+
+    $sandbox['progress']++;
+    $sandbox['last_nid_processed'] = $node->nid;
+  }
+
+  if ($sandbox['max']) {
+    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
+  }
+}
+
+/**
  * Build a list of Drupal 6 tokens and their Drupal 7 token names.
  */
 function _pathauto_upgrade_token_list() {
diff --git pathauto.module pathauto.module
index 0efb7cc..e575b4a 100644
--- pathauto.module
+++ pathauto.module
@@ -167,6 +167,77 @@ function pathauto_pattern_load_by_entity($entity, $bundle = '', $language = LANG
 }
 
 /**
+ * Load a pathauto state for an entity.
+ *
+ * @param $entity_type
+ *   An entity type.
+ * @param $entity_id
+ *   An entity ID.
+ * @return
+ *   The state of pathauto on this entity. Returns TRUE if automatic paths are
+ *   enabled, FALSE if they are explicitly disabled, or NULL if the state is
+ *   not known.
+ */
+function pathauto_entity_state_load($entity_type, $entity_id) {
+  $pathauto_state = pathauto_entity_state_load_multiple($entity_type, array($entity_id));
+  return !empty($pathauto_state) ? reset($pathauto_state) : FALSE;
+}
+
+/**
+ * Load a pathauto state for multiple entities.
+ *
+ * @param $entity_type
+ *   An entity type.
+ * @param $entity_ids
+ *   An array of entity IDs.
+ * @return
+ *   An array of states, keyed by entity IDs.
+ */
+function pathauto_entity_state_load_multiple($entity_type, $entity_ids) {
+  $pathauto_state = db_query("SELECT entity_id, pathauto FROM {pathauto} WHERE entity_type = :entity_type AND entity_id IN (:entity_ids)", array(':entity_type' => $entity_type, ':entity_ids' => $entity_ids))->fetchAllKeyed();
+  return $pathauto_state;
+}
+
+/**
+ * Save the pathauto state for an entity.
+ *
+ * @param $entity_type
+ *   An entity type.
+ * @param $entity
+ *   The entity object.
+ * @param $pathauto_state
+ *   A boolean flag if TRUE means that Pathauto should keep controlling this
+ *   entity's path in the future. A FALSE value means Pathauto should stay out.
+ */
+function pathauto_entity_state_save($entity_type, $entity, $pathauto_state) {
+  list($entity_id) = entity_extract_ids($entity_type, $entity);
+  db_merge('pathauto')
+    ->key(array(
+      'entity_type' => $entity_type,
+      'entity_id' => $entity_id,
+    ))
+    ->fields(array(
+      'pathauto' => $pathauto_state ? 1 : 0,
+    ))
+    ->execute();
+}
+
+/**
+ * Delete the pathauto state for an entity.
+ *
+ * @param $entity_type
+ *   An entity type.
+ * @param $entity
+ *   The entity object.
+ */
+function pathauto_entity_state_delete($entity_type, $entity_id) {
+  db_delete('pathauto')
+    ->condition('entity_type', $entity_type)
+    ->condition('entity_id', $entity_id)
+    ->execute();
+}
+
+/**
  * Delete multiple URL aliases.
  *
  * Intent of this is to abstract a potential path_delete_multiple() function
@@ -286,6 +357,7 @@ function pathauto_node_update($node) {
  * Implements hook_node_delete().
  */
 function pathauto_node_delete($node) {
+  pathauto_entity_state_delete('node', $node->nid);
   pathauto_entity_path_delete_all('node', $node, "node/{$node->nid}");
 }
 
@@ -384,6 +456,15 @@ function pathauto_node_operations() {
  *   An optional array of additional options.
  */
 function pathauto_node_update_alias(stdClass $node, $op, array $options = array()) {
+  // Load the state (if any) from the database if not yet present.
+  if (!isset($node->path['pathauto'])) {
+    $node->path['pathauto'] = pathauto_entity_state_load('node', $node->nid);
+  }
+  // Save any updated state.
+  else {
+    pathauto_entity_state_save('node', $node, $node->path['pathauto']);
+  }
+
   // Skip processing if the user has disabled pathauto for the node.
   if (isset($node->path['pathauto']) && empty($node->path['pathauto'])) {
     return;
