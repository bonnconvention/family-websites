<?php

/**
 * @file
 * General hooks and commonly-used functions
 */

/**
 * Implements hook_menu()
 */
function scs_menu() {
  $items = array();

  $items['admin/config/services/simplenews/settings/scs'] = array(
    'title' => 'Simplenews Content Selection',
    'description' => 'Configure what node types could be used for SCS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scs_admin_settings_form'),
    'access arguments' => array('administer scs'),
    'file' => 'scs.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function scs_permission() {
  return array(
    'administer scs' => array(
      'title' => t('Administer Simplenews Content Selection'),
      'description' => t('User can perform administrative tasks like changing view mode and newsletter content type.'),
    ),
  );
}

/**
 * Implements hook_theme()
 */
function scs_theme() {
  return array(
    'scs_sortable_table' => array(
      'render element' => 'form',
      'file' => 'scs.theme.inc',
    ),
    'scs_newsletter' => array(
      'variables' => array('nodes' => array(), 'toc' => FALSE),
      'template' => 'scs-newsletter',
      'file' => 'scs.theme.inc',
    ),
    'scs_toc' => array(
      'variables' => array('nodes' => array()),
      'file' => 'scs.theme.inc',
    )
  );
}

/**
 * Implements hook_node_operations().
 */
function scs_node_operations() {
  $operations = array(
    'scs_create' => array(
      'label' => t('Create newsletter'),
      'callback' => NULL,
    ),
  );

  return $operations;
}

/**
 * Implements hook_entity_info().
 */
function scs_entity_info() {
  $return = array(
    'node' => array(
      'view modes' => array(
        'scs' => array(
          'label' => t('Simplenews Content Selection'),
          'custom settings' => TRUE,
        ),
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function scs_form_node_admin_content_alter(&$form, &$form_state) {
  // Add an extra multistep operation to admin/content/node
  if (isset($form_state['values']['operation']) && $form_state['values']['operation'] == 'scs_create') {
    unset($form['filter']);
    unset($form['admin']);

    drupal_set_title(t('Sort nodes'));

    // Show the sorting form + ToC checkbox
    $form = array_merge($form, scs_node_sort_form($form, $form_state));
    $form['#submit'][] = 'scs_node_sort_submit';

    // Redirect to the simplenews node form
    $form['#action'] = url('node/add/' . variable_get('scs_node_type', 'simplenews'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function scs_form_node_form_alter(&$form, &$form_state) {
  // Check that we are creating a newsletter and that we come from the
  // admin/content/node
  if (!empty($form['#node_edit_form'])
    && in_array($form['type']['#value'], simplenews_get_content_types())
    && $form_state['input']['op'] = t('Create newsletter')
      && isset($form_state['input']['nodes'])
  ) {
    $nodes = node_load_multiple(array_keys($form_state['input']['nodes']));
    $form['body'][LANGUAGE_NONE][0]['#default_value'] = theme('scs_newsletter', array(
      'nodes' => $nodes,
      'toc' => empty($form_state['input']['scs_toc']) ? FALSE : TRUE,
    ));

    global $language, $user;

    $node = (object) array(
      'language' => language_default()->language,
      'title'    => empty($form_state['input']['scs_newsletter_title']) ? t('Untitled') : $form_state['input']['scs_newsletter_title'],
      'type'     => variable_get('scs_node_type', 'simplenews')
    );

    node_object_prepare($node);

    $node->uid = $user->uid;
    $node->body[$node->language][0]['value'] = $form['body'][LANGUAGE_NONE][0]['#default_value'];
    $node->body[$node->language][0]['format'] = 'full_html';
    $node->field_simplenews_term[LANGUAGE_NONE][]['tid'] = empty($form_state['input']['scs_newsletter_category']) ? get_newsletter_default_category('newsletter') : $form_state['input']['scs_newsletter_category'];

    global $language, $language_content;

    $language_copy = $language;
    $language_content_copy = $language_content;

    $languages = language_list();

    foreach (array_keys($form_state['input']['scs_newsletter_languages']) as $langcode) {
      $language = $language_content = $languages[$langcode];

      $nodes = node_load_multiple(array_keys($form_state['input']['nodes']), array(), TRUE);
      $node->body[$langcode][0]['value'] = theme('scs_newsletter', array(
        'nodes' => $nodes,
        'toc' => empty($form_state['input']['scs_toc']) ? FALSE : TRUE
      ));
      $node->body[$langcode][0]['format'] = 'full_html';

      $handler = entity_translation_get_handler('node', $node);

      $translation = array(
        'language'  => $langcode,
        'source'    => $node->language,
        'status'    => 1,
        'translate' => 0
      );

      $handler->setTranslation($translation, $node);
    }

    $language = $language_copy;
    $language_content = $language_content_copy;

    $node = node_submit($node);

    node_save($node);

    drupal_goto('node/' . $node->nid . '/edit');
  }
}

/**
 * Form callback: second step of the selection form, sorting nodes
 */
function scs_node_sort_form($form, &$form_state) {
  $nodes = array_filter($form_state['values']['nodes']);

  $form['scs_newsletter_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Newsletter title'),
    '#description' => t('Choose a title for your english version of the newsletter.'),
    '#required' => TRUE,
  );

  $form['scs_newsletter_category'] = array(
    '#type' => 'radios',
    '#title' => t('Newsletter category'),
    '#description' => t('Choose a category for your newsletter.'),
    '#options' => get_newsletter_categories('newsletter'),
    '#required' => TRUE,
  );

  $form['scs_newsletter_languages'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Newsletter languages'),
    '#description' => t('Choose the languages for your newsletter.'),
    '#options' => get_available_languages(),
  );

  // Checkbox for Table of contents
  $form['scs_toc'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create a table of contents'),
    '#description' => t('Create a table of contents at top of the newsletter with the titles of the selected nodes. If newsletter is HTML format, these table of contents will be bookmarks.'),
  );

  // Create elements for the tablesort
  $form['nodes']['#tree'] = TRUE;
  foreach ($nodes as $nid) {
    $form['nodes'][$nid] = array(
      'weight' => array(
        '#type' => 'weight',
        '#attributes' => array('class' => array('node-weight')),
      ),
    );
  }

  $form['#theme'] = 'scs_sortable_table';

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create newsletter'),
  );

  return $form;
}

/**
 * Form callback: submit handler for sorting nodes
 */
function scs_node_sort_submit(&$form, &$form_state) {
  uasort($form_state['values']['nodes'], 'drupal_sort_weight');
}

/**
 * Helper function - get taxonomy term options for select widget
 * @param $machine_name String - the machine name of the newsletter category taxonomy
 * @return array of select options for form
 */
function get_newsletter_default_category($machine_name) {
  $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;
  $options_source = taxonomy_get_tree($vid);

  return $options_source[0]->tid;
}

/**
 * Helper function - get taxonomy term options for select widget
 * @param $machine_name String - the machine name of the newsletter category taxonomy
 * @return array of select options for form
 */
function get_newsletter_categories($machine_name) {
  $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;
  $options_source = taxonomy_get_tree($vid);

  foreach ($options_source as $item) {
    $key = $item->tid;
    $value = $item->name;
    $options[$key] = $value;
  }

  return $options;
}

/**
 * Helper function - get languages names options for select widget
 * @return array of available languages names
 */
function get_available_languages() {
  $result = array();
  $languages = language_list();

  unset($languages[language_default()->language]);

  foreach ($languages as $langcode => $language)
    $result[$langcode] = $language->name;

  return $result;
}
