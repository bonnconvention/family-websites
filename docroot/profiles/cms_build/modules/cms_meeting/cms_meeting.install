<?php

include_once drupal_get_path('module', 'cms') . '/utils.php';

/**
 * Implements hook_uninstall()
 */
function cms_meeting_uninstall() {
    user_role_delete(ROLE_MANAGE_MEETINGS);

    CMSUtils::vocabulary_delete(VOC_MEETING_KIND);
    CMSUtils::vocabulary_delete(VOC_MEETING_TYPE);
    CMSUtils::vocabulary_delete(VOC_MEETING_STATUS);

    CMSUtils::remove_menu_and_submenu('main-menu', 'Meetings', '<front>');
}

function cms_meeting_install () {
    $role = CMSUtils::get_or_create_role(ROLE_MANAGE_MEETINGS);

    CMSUtils::vocabulary_create('Meeting kind', VOC_MEETING_KIND);
    CMSUtils::vocabulary_create('Meeting type', VOC_MEETING_TYPE);
    CMSUtils::vocabulary_create('Meeting status', VOC_MEETING_STATUS);

    menu_rebuild();

    if(!empty($role)) {
        $rid = $role->rid;
        $permissions = array(
            'create meeting content' => TRUE,
            'edit own meeting content' => TRUE,
            'edit any meeting content' => TRUE,
            'delete own meeting content' => TRUE,
            'delete any meeting content' => TRUE,

            'search content' => TRUE,
            'use advanced search' => TRUE,
        );

        CMSUtils::set_vocabulary_permissions($permissions, VOC_MEETING_KIND, 'meeting', ROLE_MANAGE_MEETINGS);
        CMSUtils::set_vocabulary_permissions($permissions, VOC_MEETING_TYPE, 'meeting', ROLE_MANAGE_MEETINGS);
        CMSUtils::set_vocabulary_permissions($permissions, VOC_MEETING_STATUS, 'meeting', ROLE_MANAGE_MEETINGS);

        user_role_change_permissions($rid, $permissions);

        CMSUtils::role_add_permissions('administrator', $permissions);
    } else {
        watchdog('meeting', "Unable to load role name '@role'", array("@role" => ROLE_MANAGE_MEETINGS), WATCHDOG_WARNING);
    }
}

function cms_meeting_update_7007() {
    $role = CMSUtils::get_or_create_role(ROLE_MANAGE_MEETINGS);
    $rid = $role->rid;

    $permissions = array(
        'create meeting content' => TRUE,
        'edit own meeting content' => TRUE,
        'edit any meeting content' => TRUE,
        'delete own meeting content' => TRUE,
        'delete any meeting content' => TRUE,
        'search content' => TRUE,
        'use advanced search' => TRUE,
    );

    CMSUtils::set_vocabulary_permissions($permissions, VOC_MEETING_KIND, 'meeting', ROLE_MANAGE_MEETINGS);
    CMSUtils::set_vocabulary_permissions($permissions, VOC_MEETING_TYPE, 'meeting', ROLE_MANAGE_MEETINGS);
    CMSUtils::set_vocabulary_permissions($permissions, VOC_MEETING_STATUS, 'meeting', ROLE_MANAGE_MEETINGS);

    user_role_change_permissions($rid, $permissions);

    $role = CMSUtils::get_or_create_role('administrator');
    user_role_change_permissions($role->rid, $permissions);

    return t('Meeting permissions updated');
}

/**
 * Set the map visible for previous meetings
 */
function cms_meeting_update_7008() {
  $rows = db_select('node', 'a')->fields('a', array('nid', 'vid'))->condition('a.type', 'meeting')->execute()->fetchAll();
  foreach($rows as $row) {
    db_insert('field_data_field_show_map')
      ->fields(array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id', 'language', 'delta', 'field_show_map_value'))
      ->values(array(
        'entity_type' => 'node',
        'bundle' => 'meeting',
        'deleted' => 0,
        'entity_id' => $row->nid,
        'revision_id' => $row->vid,
        'language' => LANGUAGE_NONE,
        'delta' => 0,
        'field_show_map_value' => 1
      ))->execute();
    db_insert('field_revision_field_show_map')
      ->fields(array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id', 'language', 'delta', 'field_show_map_value'))
      ->values(array(
        'entity_type' => 'node',
        'bundle' => 'meeting',
        'deleted' => 0,
        'entity_id' => $row->nid,
        'revision_id' => $row->vid,
        'language' => LANGUAGE_NONE,
        'delta' => 0,
        'field_show_map_value' => 1
      ))->execute();
  }
}

/**
 * Add the field_iso2 field and set its values.
 */
function cms_meeting_update_7009() {
  $field_example = array(
    'field_name' => 'field_iso2',
    'cardinality' => 1,
    'type' => 'text',
  );
  field_create_field($field_example);

  $field_example_instance = array(
    'field_name' => 'field_iso2',
    'label' => st('ISO2'),
    'bundle' => 'languages',
    'entity_type' => 'taxonomy_term',
    'widget' => array(
      'type' => 'text_textfield',
    ),
  );
  field_create_instance($field_example_instance);

  $iso2_json = file_get_contents(drupal_get_path('module', 'cms_meeting') . '/data/language-codes-3b2_json.json');
  $iso2_json = json_decode($iso2_json, TRUE);
  foreach ($iso2_json as $data) {
    $name = $data['English'];
    $name = explode('; ', $name);
    $name = trim($name[0]);
    $term = taxonomy_get_term_by_name($name, 'languages');
    if (empty($term)) {
      continue;
    }

    $term = reset($term);
    $term->field_iso2[LANGUAGE_NONE][0]['value'] = $data['alpha2'];
    taxonomy_term_save($term);
  }
}
