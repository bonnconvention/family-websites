<?php
/**
 * @file
 * Code for the Meetings feature.
 */

include_once 'cms_meeting.features.inc';
/**
 * @file
 * Code for the Meetings feature.
 */
module_load_include('inc', 'cms_meeting', 'cms_meeting.features');
module_load_include('cron', 'cms_meeting', 'cms_meeting');
module_load_include('inc', 'cms_meeting', 'cms_meeting.api');
module_load_include('php', 'cms', 'utils');

define('ROLE_MANAGE_MEETINGS', 'manage meeting');

define('VOC_MEETING_KIND', 'meeting_kind');
define('VOC_MEETING_TYPE', 'meeting_type');
define('VOC_MEETING_STATUS', 'meeting_status');
define('FILTER_MEETING_INSTRUMENT_FIELD', 'field_instrument_target_id');

/**
 * Implements hook_menu_local_tasks_alter();
 *
 * Show 'Create meeting' button on Species listing view
 *
 * @param   array   $data
 * @param   array   $router_item
 * @param   string  $root_path
 */
function cms_meeting_menu_local_tasks_alter(&$data, $router_item, $root_path) {
    switch($root_path){
        case CMSMeeting::$bundle . '/listing' :
            $item = menu_get_item('node/add/' . CMSMeeting::$bundle);
            $item['title'] = t('Create ' . CMSMeeting::$bundle);
            if ($item['access']) {
                $data['actions']['output'][] = array(
                    '#theme' => 'menu_local_action',
                    '#link' => $item,
                );
            }
            break;
    }
}

/**
 * Implements hook_menu();
 */
function cms_meeting_menu() {

    $items['node/%node/manage_documents'] = array(
        'title' => t('Manage documents'),
        'page callback' => 'cms_meeting_manage_documents',
        'page arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'weight' => 2,
        'access callback' => 'cms_meeting_manage_documents_access',
        'access arguments' => array(1),
    );

    $items['meeting/%node/delete_documents'] = array(
        'page callback' => 'cms_meeting_delete_documents',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['meeting/%node/add_documents'] = array(
        'page callback' => 'cms_meeting_add_documents',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    $items['api/meeting/list/%'] = array(
        'title' => 'Meeting API (List meetings)',
        'page callback' => 'api_meeting_list',
        'page arguments' => array(3),
        'access arguments' => array('access content'),
        'file' => 'cms_meeting.api.inc',
        'type' => MENU_CALLBACK,
    );

    $items['meeting/list/%'] = array(
        'page callback' => 'cms_meeting_list_from_cache',
        'page arguments' => array(2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'cms_meeting.api.inc',
    );

    $items['meeting/download-all-files/%'] = array(
        'page callback' => 'cms_meeting_download_all_files',
        'page arguments' => array(2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
    );

    return $items;
}


/**
 * Permission access to 'manage document'
 * @param stdClass $node Drupal node
 * @return bool TRUE if user has permission to update the node
 */
function cms_meeting_manage_documents_access($node) {
    if(!empty($node->type) && $node->type == 'meeting') {

        return node_access('update', $node);
    }
    return FALSE;
}


/**
 * Implementes hook_theme($existing, $type, $theme, $path)
 */
function cms_meeting_theme($existing, $type, $theme, $path) {
    $base = array(
        'file' => 'theme.inc',
        'path' => $path . '/theme',
    );
    return array(
        'meeting_manage_documents_template' => array(
            'template' => 'manage-documents',
            'arguments' => array(),
            'path' => drupal_get_path('module', 'cms_meeting') . '/templates',
        ),
        'table__meetings_template_country' => $base + array(
                'variables' => array(
                    'header' => NULL,
                    'rows' => NULL,
                    'attributes' => array(),
                    'caption' => NULL,
                    'colgroups' => array(),
                    'sticky' => TRUE,
                    'empty' => '',
                    'settings' => array()
                )
            ),
        'table__meetings_template_instrument' => $base + array(
                'variables' => array(
                    'header' => NULL,
                    'rows' => NULL,
                    'attributes' => array(),
                    'caption' => NULL,
                    'colgroups' => array(),
                    'sticky' => TRUE,
                    'empty' => '',
                    'settings' => array()
                )
            )
    );
}


/**
 * Callback function
 *
 * Delete selected documents for a specified meeting
 */
function cms_meeting_delete_documents($node) {
    $data = array('message' => t('No documents selected'));
    if (empty($_POST['documents'])) {
        echo json_encode($data);
        drupal_exit();
    }
    $existing_documents = CMSBase::get_field_list_target_id($node, 'field_meeting_document');
    $langcode = field_language('node', $node, 'field_meeting_document');
    $nids = explode(',', $_POST['documents']);
    $total = 0;
    foreach ($nids as $idx => $nid) {
        if (in_array($nid, $existing_documents)) {
            unset($existing_documents[$idx]);
            $total ++;
        }
    }
    if (empty($existing_documents)) {
        unset($node->field_meeting_document[$langcode]);
    } else {
        CMSBase::set_field_list_target_id($node, 'field_meeting_document', array('field_meeting_document' => $existing_documents), true);
    }
    node_save($node);

    //cache_clear_all('content:' . $node->nid .':'.$node->nid, 'cache_content');

    $data['message'] = $total . ' ' . t('documents removed from meeting');
    echo json_encode($data);
    drupal_set_message($data['message']);
}


/**
 * JSON endpoint - Add selected documents for a specified meeting
 */
function cms_meeting_add_documents($node) {

    $data = array('message' => t('No documents selected'));
    if (empty($_POST['documents'])) {
        echo json_encode($data);
        drupal_exit();
    }
    $existing_documents = CMSBase::get_field_list_target_id($node, 'field_meeting_document');
    $nids = explode(',', $_POST['documents']);
    $total = 0;
    foreach ($nids as $nid) {
        $query = new EntityFieldQuery();
        if($query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', 'document')
                ->propertyCondition('nid', $nid)
                ->count()->execute()) {
            array_push($existing_documents, $nid);
            $total ++;
        } else {
            drupal_set_message("Node $nid does not exist", 'error');
        }
    }
    CMSBase::set_field_list_target_id($node, 'field_meeting_document', array('field_meeting_document' => $existing_documents), true);
    node_save($node);

    //cache_clear_all('content:' . $node->nid.':'.$node->nid, 'cache_content', TRUE);

    $data['message'] = $total . ' ' . t('documents added to meeting');
    echo json_encode($data);
    drupal_set_message($data['message']);
}


/**
 * Theme meeting manage documents interface
 */
function cms_meeting_manage_documents($node) {
    //Redirect on  from front-end to manage (sudomain)
    $domain = domain_get_domain();
    if (!empty($domain) && !strpos($domain['subdomain'], 'manage')) {
        $manage_domain_id = db_query("SELECT domain_id FROM {domain} WHERE machine_name LIKE '%_manage' ")->fetchField();
        unset($_GET['destination']);
        $manage = domain_load($manage_domain_id);
        $path = domain_get_uri($manage);
        drupal_goto($path);
    }

    if ($node->type != 'meeting') {
        drupal_not_found();
        drupal_exit();
    }

    if (strlen($node->title) > 55) {
        $page_title = CMSUtils::character_limiter($node->title, 55, '...');
    }else {
        $page_title = $node->title;
    }
    drupal_set_title($page_title, PASS_THROUGH);

    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), '<front>');
    $breadcrumb[] = l(t('Meetings'), 'meeting/listing');
    $breadcrumb[] = l($page_title, 'node/' . $node->nid);

    drupal_set_breadcrumb($breadcrumb);

    return theme('meeting_manage_documents_template', array('node' => $node));
}

function cms_meeting_views_default_views_alter(&$views) {
    if (isset($views['meetings'])) {
        $handler = &$views['meetings'];
        $roles = user_roles();
        $rids = array();
        foreach($roles as $rid => $role) {
            if($role == 'authenticated user') {
                $rids[$rid] = $rid;
            }
        }
        $handler->display['default']->display_options['access']['type'] = 'role';
        $handler->display['default']->display_options['access']['role'] = array_filter($rids);
    }
    return $views;
}

/**
 * Implements hook_node_view();
 */
function cms_meeting_node_view($node, $view_mode, $langcode) {
    if(function_exists('cms_manage_node_access') && $node->type == CMSMeeting::$bundle) {
        cms_manage_node_access($node);
    }

    switch ($node->type) {
        case 'country':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'meetings', 'country_meetings');
                } else if (is_theme_frontend()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'front_end_meetings', 'country_meetings');
                }
            }
            break;
        case 'document':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'meetings', 'document_meetings');
                } else if (is_theme_frontend()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'front_end_meetings', 'document_meetings');
                }
            }
            break;
        case 'legal_instrument':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'meetings', 'instrument_meetings');
                } else if (is_theme_frontend()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'front_end_meetings', 'instrument_meetings');
                }
            }
            break;
        case 'meeting':

            $node->participants = array();
            $langcode = field_language('node', $node, 'field_meeting_participants');
            /*if (isset($node->field_meeting_participants) && (!empty($node->field_meeting_participants))) {
                $agent = CMSContacts::agent();
                foreach ($node->field_meeting_participants[$langcode] as $expert) {
                    $contact = $agent->search_user($expert['value']);
                    $node->participants[] = $contact;
                }
            }*/

            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {

                } else if (is_theme_frontend()) {

                    //Add map
                    $langcodes = field_language('node', $node);
                    if (!empty($node->field_meeting_city[$langcodes['field_meeting_city']][0]['value'])) {
                        $city = $node->field_meeting_city[$langcodes['field_meeting_city']][0]['value'];
                    }
                    if (!empty($node->field_meeting_latitude[$langcodes['field_meeting_latitude']][0]['value'])
                        && !empty($node->field_meeting_longitude[$langcodes['field_meeting_longitude']][0]['value'])) {
                        $lat = $node->field_meeting_latitude[$langcodes['field_meeting_latitude']][0]['value'];
                        $lng = $node->field_meeting_longitude[$langcodes['field_meeting_longitude']][0]['value'];
                    }
                    $country = node_load($node->field_country[$langcodes['field_country']][0]['target_id']);
                    $point['city'] = (!empty($city)) ? $city : null;
                    $point['lat'] = (!empty($lat)) ? $lat : null;
                    $point['lng'] = (!empty($lng)) ? $lng : null;
                    $point['country'] = $country->title;
                    $point['iso2'] = $country->field_country_iso2[LANGUAGE_NONE][0]['value'];

                    // Inject map center
                    drupal_add_js(array('gmap' => array('marker' => $point )), 'setting');

                    //Add support for Google maps
                    drupal_add_js('https://maps.googleapis.com/maps/api/js?&sensor=true', array(
                        'type' => 'external', 'scope' => 'header',
                        'group' => JS_DEFAULT, 'weight' => 1));

                    $mw = entity_metadata_wrapper('node', $node);
                    $show_map = 0;
                    try {
                      $show_map = $mw->field_show_map->value();
                    }
                    catch(Exception $e) {
                    }
                    $node->content['show_map'] = $show_map;
                    if ($show_map) {
                      drupal_add_js('/' . drupal_get_path('theme', 'cms_frontend') . '/js/gmaps.js', array(
                          'type' => 'external',
                          'scope' => 'footer',
                          'group' => JS_DEFAULT,
                          'weight' => 10
                        )
                      );
                    }
                }
            }
            break;
        case 'project':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'meetings', 'project_meetings');
                } else if (is_theme_frontend()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'front_end_meetings', 'project_meetings');
                }
            }
            break;
        case 'publication':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'meetings', 'publication_meetings');
                } else if (is_theme_frontend()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'front_end_meetings', 'publication_meetings');
                }
            }
            break;
        case 'species':
            if ($view_mode == 'full' && node_is_page($node)) {
                if (is_theme_admin()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'meetings', 'species_meetings');
                } else if (is_theme_frontend()) {
                    //Set related data
                    CMSBase::set_related_content_from_views($node, 'meetings', 'front_end_meetings', 'species_meetings');
                }
            }
            break;
    }
}

/**
 * Implements hook_form_alter();
 */
function cms_meeting_form_alter(&$form, &$form_state, $form_id) {
    switch ($form_id) {
        case 'meeting_node_form' :

            $path = drupal_get_path('theme', 'cms_manage');
            drupal_add_js("$path/js/jquery.ui.timepicker.js");
            drupal_add_css("$path/css/jquery.ui.timepicker.css");

            $form['field_meeting_document']['#access'] = FALSE;
            $form['field_meeting_participants']['#access'] = FALSE;
//            $node =  $form['#node'];
//            $default_value = array();
//            $langcode = field_language('node', $node, 'field_meeting_participants');
//            if (property_exists($node, 'field_meeting_participants') && array_key_exists($langcode, $node->field_meeting_participants)) {
//                foreach ($node->field_meeting_participants[$langcode] as $index => $expert) {
//                    $default_value[] = $expert['value'];
//                }
//            }
//            $participants_options = CMSContactBase::get_contacts_as_options();
//            asort($participants_options);
//
//            $form['field_meeting_participants'] = array(
//                '#type' => 'select',
//                '#title' => t('Participants'),
//                '#multiple' => TRUE,
//                '#options' => $participants_options,
//                '#default_value' => $default_value,
//            );
            /**
             * Callback function to manipulate field_species_experts data before DB insert
             */
            //$form['#submit'][] = 'cms_meeting_alter_participants_submit';

            $breadcrumb = array();
            $breadcrumb[] = l(t('Home'), '<front>');
            $breadcrumb[] = l(t('Meetings'), 'meeting/listing');
            if (isset($form['nid']) && (is_numeric($form['nid']['#value']))) {
                $breadcrumb[] = l($form['#node']->title, 'node/' . $form['#node']->nid);
            }


            drupal_set_breadcrumb($breadcrumb);

            $form['#attached']['js'] = array(
                drupal_get_path('module', 'cms_meeting') . '/js/form.js' => array(
                    'type' => 'file',
                ),
            );
            break;

        case 'views_exposed_form':

            /*
            Create year selection for event archive
            */
            if ($form['#id'] == 'views-exposed-form-event-and-meetings-lists-page-1') {
                $form['status']['#access'] = FALSE;
                $form['submit']['#access'] = FALSE;

                $options = array("" => "--Select--");
                if ($cache = cache_get('event_meetings_archive_years')) {
                    $years = $cache->data;
                } else {
                    $result = db_query('SELECT DISTINCT YEAR(event_calendar_date_value) as year FROM {field_data_event_calendar_date} ORDER BY year');
                    $years = $result->fetchCol();
                    cache_set('event_meetings_archive_years', $years, 'cache');
                }

                foreach ($years as $y) {
                    $options[$y] = $y;
                }

                $year = substr($form['#action'], strrpos($form['#action'], '/') + 1);
                $url = substr($form['#action'], 0, strrpos($form['#action'], '/'));
                if ((int) $year == 0) {
                    $url = $form['#action'];
                    $year = '';
                }
                $form['event_date'] =  array(
                    '#title' => t('Year'),
                    '#type' => 'select',
                    '#name' => 'event_date_archive_year',
                    '#id' => 'event_date_archive_year',
                    '#options' => $options,
                    '#default_value' => $year,
                    '#attributes' => array(
                        'class' => array('form-control')
                    ),
                );
                drupal_add_js('
                    jQuery(document).ready(function () {
                        jQuery("#event_date_archive_year").on("change", function(){
                            var year = jQuery(this).val();
                            window.location.href = "'. $url .'/" + year;
                        });
                    });',
                'inline');
            }
            break;
        case 'node_delete_confirm':
            if ($form['#node']->type == 'meeting') {
                $form['#submit'][] = '_meeting_redirect_after_delete';
            }

            break;
    }

    return $form;
}


function cms_meeting_alter_participants_submit(&$form, &$form_state) {
    $values = $form_state['values'];
    $language = $values['language'];
    if (array_key_exists('field_meeting_participants', $values)) {
        if (!empty($values['field_meeting_participants'])) {
            $participants = $values['field_meeting_participants'];
            $count = 0;
            foreach ($participants as $uid => $participant) {
                $form_state['values']['field_meeting_participants'][$language][$count]['value'] = $uid;
                $count += 1;
            }
        }else {
            $form_state['values']['field_meeting_participants'][$language] = array();
        }
    }else {
        $form_state['values']['field_meeting_participants'][$language] = array();
    }
}

function _meeting_redirect_after_delete(&$form, &$form_state) {
    $form_state['redirect'] = 'meeting/listing';
}

/**
 * Implements hook_field_extra_fields()
 *
 * @return mixed Extra fields information
 */
function cms_meeting_field_extra_fields() {
    $extra['node'][CMSMeeting::$bundle_country_module]['display'] = array(
        'meetings' => array(
            'label' => t('Meetings'),
            'description' => t('Injects into country content type the list of meetings for the country'),
            'weight' => 100,
        ),
    );
    $extra['node'][CMSMeeting::$bundle_instrument_module]['display'] = array(
        'meetings' => array(
            'label' => t('Meetings'),
            'description' => t('Injects into CMS Instrument content type the list of meetings for the CMS Instrument'),
            'weight' => 100,
        ),
    );
    return $extra;
}


/**
 * Implements hook_node_presave().
 */
function cms_meeting_node_presave($node) {
  // When editing a meeting or document, invalidate the document archive cache.
  if ($node->type == 'meeting') {
    cms_meeting_download_all_files_cache_reset($node->nid);
  }
  else if ($node->type == 'document') {
    if (!empty($node->field_document_meeting[LANGUAGE_NONE])) {
      foreach($node->field_document_meeting[LANGUAGE_NONE] as $meeting) {
        cms_meeting_download_all_files_cache_reset($meeting['target_id']);
      }
    }
  }
}

/**
 * Reset cache variables for files archive of a meeting.
 */
function cms_meeting_download_all_files_cache_reset($nid) {
  $archive_server_name  = 'meeting_documents_archive_'.$nid;
  cache_set($archive_server_name, '_', 'cache', 0);
}

/**
 * Callback function for menu item from hook_menu
 * Function used to download all the documents files related to a meeting
 *
 *
 * @param $nid - Meeting node id
 */

function cms_meeting_download_all_files($nid) {

    $node = node_load($nid);
    if (empty($node) || $node->type != 'meeting') {
        drupal_set_message(t('Meeting not found'), 'error');
        drupal_goto();
    }

    $slug = CMSBase::slug($node->title, 50, '-');

    $archive_download_name= 'Meeting_'.$slug.'_Documents';
    $archive_server_name  = 'meeting_documents_archive_'.$nid;
    $archive_file_name = $archive_server_name.'.zip';
    $folder_path = 'public://downloads/meeting_documents';

    //check for cache of the path
    if($cached = cache_get($archive_server_name, 'cache'))  {
        $archive_realpath = $cached->data;
    }

    //if no path cached or the path cached is invalid - create the Archive
    if(empty($cached->data) || !file_exists($cached->data)) {
        //check destination folder
        if (!file_prepare_directory($folder_path, FILE_CREATE_DIRECTORY)) {
            drupal_set_message(t('There was an error exporting the files!'), 'error');
            watchdog('error', "Meeting Document download as zip: Can't write on $folder_path");
            drupal_goto(url('node/'.$nid, array ('absolute' => TRUE)));
        }

        $archive_realpath = drupal_realpath($folder_path) ._DS_. $archive_file_name;

        //remove old file if exists (when cache expired)
        if (file_exists($archive_realpath)) {
            file_unmanaged_delete($archive_realpath);
        }

        //get results from view
        $view = views_get_view('meeting_documents_list_reorder');
        $view_display = 'download_meeting_doc';
        if ($view && $view->access($view_display)) {
            $view->set_display($view_display);
            $view->set_arguments(array($nid));
            $view->execute();

            $results = $view->result;

            $fids = array();
            foreach ($results as $result) {
                $field_ids = array();

                foreach ($result->_field_data['nid']['entity']->field_document_files as $fields) {
                    foreach($fields as $field) {
                        if (!empty($field['value'])) {
                            $field_ids []= $field['value'];
                        }
                    }
                }
                if (!empty($field_ids)) {
                    $result_files = db_query('SELECT * FROM {field_data_field_document_file} f WHERE f.entity_id IN (:ids)', array(':ids' => $field_ids));
                    //get the files ids
                    foreach ($result_files as $record) {
                        $fids []= $record->field_document_file_fid;
                    }
                }
            }
            //Create the archive
            $archive = new PclZip($archive_realpath);
            $files = array();
            foreach ($fids as $fid) {
                $file = file_load($fid);
                $file_realpath = drupal_realpath($file->uri);
                if (file_exists($file_realpath) && is_readable($file_realpath)) {
                    $files []= $file_realpath;
                }
            }
            if (empty($files)) {
                drupal_set_message(t('There was an error exporting the files! No documents found!'), 'error');
                watchdog('error', "Error when exporting documents of meeting $nid : No documents writable found!");
                drupal_goto(url('node/'.$nid, array ('absolute' => TRUE)));
            }
            if (!$archive->add($files, PCLZIP_OPT_REMOVE_ALL_PATH, PCLZIP_OPT_TEMP_FILE_THRESHOLD, 10)){
                drupal_set_message(t('There was an error exporting the files!'), 'error');
                watchdog('error', "PCLZIP error when exporting documents of meeting $nid : $archive->error_string, $archive->error_code ");
                drupal_goto(url('node/'.$nid, array ('absolute' => TRUE)));
            }
            //Set the path in cache
            //TODO Cron to remove old files
            cache_set($archive_server_name, $archive_realpath, 'cache', 60*1440); //1 day
        } else {
            //if the view wasn't found
            drupal_set_message(t('There was an error exporting the files!'), 'error');
            watchdog('error', "Exporting meeting documents: View not found");
            drupal_goto(url('node/'.$nid, array ('absolute' => TRUE)));
        }
    } else {
        //if archive file is from cache, add a difference in filename
        $archive_download_name .= '_C';
    }

    //Download the Archive
    header("Content-Type: application/octet-stream");
    header('Content-Description: File Transfer');
    header('Content-Disposition: attachment; filename=' . $archive_download_name.'.zip');
    readfile(drupal_realpath($archive_realpath));
    exit();
}


class CMSMeeting extends CMSBase {

    static $bundle = 'meeting';
    static $bundle_country_module = 'country';
    static $field_meetings_country = 'meetings';
    static $bundle_instrument_module = 'legal_instrument';
    static $field_meetings_instrument = 'meetings';

    static $related_fields = array(
        'species' => 'field_meeting_species',
        'publication' => 'field_meeting_publication',
        'document' => 'field_meeting_document'
    );
    static $false_related_fields = array(
    );


    /**
     * Create a new CMS meeting node instance.
     *
     * @param bool $save If TRUE, object is saved into database
     * @return stdClass The node object initialized
     */
    static function node_create($title, $save = TRUE, $uuid = NULL) {
        return self::drupal_node_create($title, 'meeting', $save, $uuid);
    }


    static function get_uuid($node) {
        return CMSUtils::get_node_uuid($node);
    }

    /**
     * Get all documents nodes for a meeting
     *
     * @param   stdClass   $node
     * @return  array
     */
    static function get_documents($node) {
        $nids = CMSBase::get_field_list_target_id($node, 'field_meeting_document');
        return node_load_multiple($nids);
    }

    public static function node_to_array($node, $export_base_dir) {
        $ret = array(
            'title' => $node->title,
            'status' => $node->status,
            'uuid' => CMSUtils::get_node_uuid($node)
        );
        self::get_field_single_value($node, 'field_meeting_abbreviation', $ret);

        $ret['body'] = self::get_field_body($node, $out, 'body');
        self::get_field_single_value($node, 'field_meeting_start', $ret);
        self::get_field_single_value($node, 'field_meeting_start_time', $ret);
        self::get_field_single_value($node, 'field_meeting_reg_deadline', $ret);
        self::get_field_single_value($node, 'field_meeting_end', $ret);
        $ret['field_instrument'] = self::get_field_instrument_name($node, 'field_instrument');
        $ret['field_meeting_type'] = self::get_field_taxonomic_term_name($node, 'field_meeting_type', VOC_MEETING_TYPE);
        $ret['field_meeting_kind'] = self::get_field_taxonomic_term_name($node, 'field_meeting_kind', VOC_MEETING_KIND);
        $ret['field_meeting_status'] = self::get_field_taxonomic_term_name($node, 'field_meeting_status', VOC_MEETING_STATUS);
        self::get_field_single_value($node, 'field_meeting_city', $ret);
        self::get_field_single_value($node, 'field_meeting_location', $ret);
        $ret['field_country'] = self::get_field_country_code($node, 'field_country');
        $ret['field_meeting_image'] = self::export_field_files($node, 'field_meeting_image', $export_base_dir);
        self::get_field_single_value($node, 'field_meeting_organizer', $ret);
        self::get_field_single_value($node, 'field_meeting_coorganizer', $ret);
        $ret['field_meeting_languages'] = self::get_field_taxonomic_terms_names($node, 'field_meeting_languages', VOC_LANGUAGES);
        self::get_field_single_value($node, 'field_meeting_end', $ret);
        self::get_field_single_value($node, 'field_meeting_latitude', $ret);
        self::get_field_single_value($node, 'field_meeting_longitude', $ret);
        $ret['field_meeting_document'] = self::get_entity_reference_by_uuid($node, 'field_meeting_document');
        $ret['field_meeting_url'] = self::get_field_url($node, 'field_meeting_url');
        self::get_field_list_value($node, 'field_meeting_participants', $ret);
        $ret['field_threats'] = self::get_field_taxonomic_terms_names($node, "field_threats", VOC_THREATS);

        foreach(self::$related_fields as $field_name) {
            $ret[$field_name] = self::get_entity_reference_by_uuid($node, $field_name);
        }

        return $ret;
    }


    /**
     * Create a new node, or update an existing node with data from an array
     * @param $data
     * @param string $files_path_prefix
     * @param null $existing_node
     * @return object Drupal node
     */
    static function node_from_array($data, $files_path_prefix = '', &$existing_node = NULL) {
        $ret = NULL;
        if(empty($data['title'])) {
            CMSUtils::println('CMSMeeting::node_from_array(): Cannot import meeting without title, field_meeting_start or field_country');
            return $ret;
        }
        if($existing_node === NULL) {
            $node = self::node_create($data['title'], FALSE);
            if(!empty($data['uuid'])) {
                $node->uuid = $data['uuid'];
            }
        } else {
            $node = $existing_node;
        }

        $node->title = $data['title'];
        if (isset($data['status']) && in_array($data['status'],array(0,1))) {
            $node->status = $data['status'];
        }
        self::set_field_single_value($node, 'field_meeting_abbreviation', $data);
        self::set_field_body($node, $data, 'body');
        self::set_field_single_value($node, 'field_meeting_start', $data);
        self::set_field_single_value($node, 'field_meeting_start_time', $data);
        self::set_field_single_value($node, 'field_meeting_reg_deadline', $data);
        self::set_field_single_value($node, 'field_meeting_end', $data);
        self::set_field_instrument($node, 'field_instrument', $data);
        self::set_field_taxonomic_term($node, 'field_meeting_type', VOC_MEETING_TYPE, $data);
        self::set_field_taxonomic_term($node, 'field_meeting_kind', VOC_MEETING_KIND, $data);
        self::set_field_taxonomic_term($node, 'field_meeting_status', VOC_MEETING_STATUS, $data);
        self::set_field_single_value($node, 'field_meeting_city', $data);
        self::set_field_single_value($node, 'field_meeting_location', $data);
        self::set_field_country($node, 'field_country', $data);
        self::set_field_single_value($node, 'field_meeting_organizer', $data);
        self::set_field_single_value($node, 'field_meeting_coorganizer', $data);
        self::set_field_url($node, 'field_meeting_url', $data);
        self::set_field_taxonomic_terms($node, "field_threats", VOC_THREATS, $data);


        if (array_key_exists('field_meeting_languages', $data)) {
            if (is_array($data['field_meeting_languages'])) {
                self::set_field_taxonomic_terms($node, 'field_meeting_languages', VOC_LANGUAGES, $data);
            }else {
                self::set_field_taxonomic_term($node, 'field_meeting_languages', VOC_LANGUAGES, $data);
            }
        }

        self::set_field_single_value($node, 'field_meeting_latitude', $data);
        self::set_field_single_value($node, 'field_meeting_longitude', $data);
        self::set_field_list_value($node, 'field_meeting_participants', $data);

        // Unlink previous documents, adds new documents and may leave orphaned documents (those that were removed)
        self::set_entity_reference_by_uuid($node, 'field_meeting_document', $data);
        // Duplicate images should be handled by Drupal using internal deduplication http://drupal.org/node/1409056
        self::import_field_files($node, 'field_meeting_image', $data, self::$bundle, $files_path_prefix);

        foreach(self::$related_fields as $field_name) {
            self::set_entity_reference_by_uuid($node, $field_name, $data);
        }

        node_save($node);
        return $node;
    }

    public static function map_remote_meetings($profile){
        $ret = array();
        $nodes = node_load_multiple(array(), array('type' => CMSMeeting::$bundle));
        foreach($nodes as $node) {
            $ret[$profile . ':' . $node->uuid] = $node->title . ' (' . strtoupper($profile) . ')';
        }

        return $ret;
    }


    /**
     * Retrieve the meetings which have country (field_country) set to a specified country
     * @param $id_country integer Country to filter by
     * @return mixed Array of meeting nodes
     */
    public static function get_meetings_for_country($id_country) {
        $ret = array();
        if(!is_numeric($id_country)) {
            watchdog('meeting', 'get_meetings_for_country - parameter is not an integer, returning empty result');
            return $ret;
        }
        $query = new EntityFieldQuery();
        $query = $query
            ->entityCondition('entity_type', 'node')
            ->propertyCondition('type', self::$bundle)
            ->propertyCondition('status', NODE_PUBLISHED)
            ->fieldCondition('field_country', 'target_id', $id_country, '=')
            ->execute();
        if(!empty($query['node'])) {
            $ret = node_load_multiple(array_keys($query['node']));
        }
        return $ret;
    }

    public static function get_meetings_for_content_type($nid, $field) {
        $ret = array();
        if(!is_numeric($nid)) {
            watchdog('meeting', 'get_meetings_for_content_type() - $nid is not an integer, returning empty result');
            return $ret;
        }
        $query = new EntityFieldQuery();
        $query = $query
            ->entityCondition('entity_type', 'node')
            ->propertyCondition('type', self::$bundle)
            ->propertyCondition('status', NODE_PUBLISHED)
            ->fieldCondition($field, 'target_id', $nid, '=')
            ->execute();
        if(!empty($query['node'])) {
            $ret = node_load_multiple(array_keys($query['node']));
        }
        return $ret;
    }


    /**
     * Retrieve the meeting which have abbreviation (field_meeting_abbreviation_value) set to a
     * specified abbreviation and the specified instrument
     * @param $abbreviation string abbreviation to filter by
     * @param $instrument string instrument to filter by
     * @return meeting node
     */
    public static function get_meeting_by_abbreviation($abbreviation,$instrument){
        $meeting = NULL;
        $instrument_obj = CMSLegalInstrument::get_by_name($instrument);

        if ($instrument_obj !== NULL) {
            $instrument_nid = $instrument_obj->nid;

            $query = new EntityFieldQuery();
            $query = $query
                ->entityCondition('entity_type', 'node')
                ->propertyCondition('type', self::$bundle)
                ->propertyCondition('status', NODE_PUBLISHED)
                ->fieldCondition('field_meeting_abbreviation', 'value', $abbreviation, '=')
                ->fieldCondition('field_instrument', 'target_id', $instrument_nid, '=')
                ->execute();

            if ($query['node'] !== NULL) {
                $meeting_result = array_keys($query['node']);
                if (!empty($meeting_result)) {
                    $meeting = $meeting_result[0];
                }
            }
        }

        return $meeting;
    }
}

function cms_meeting_draggableviews_views_submit_alter(&$arguments, $view, &$form_values) {
  if (module_exists('cms_varnish')) {
    $urls = [];
    if (!empty($arguments)) {
      foreach ($arguments as $nid) {
        $urls[] = "node/$nid";
      }
      $urls = array_merge($urls, cms_varnish_get_url_aliases($urls));
      cms_varnish_purge_urls($urls);
    }
  }
}
