<?php
/**
 * @file
 * Code for the cms_varnish feature.
 */

include_once 'cms_varnish.features.inc';

/**
 * Implements hook_node_delete().
 */
function cms_varnish_node_delete($node) {
  _cms_varnish_purge_node($node, TRUE);
}

/**
 * Implements hook_node_update().
 */
function cms_varnish_node_update($node) {
  _cms_varnish_purge_node($node);
}

/**
 * Implements hook_node_insert().
 */
function cms_varnish_node_insert($node) {
  _cms_varnish_purge_node($node);
}

/**
 * Purge all pages for a node.
 *
 * @param $node
 * @param bool $deleted
 */
function _cms_varnish_purge_node($node, $deleted = FALSE) {
  // For documents, we need to invalidate all meetings they are linked to.
  if ($node->type == 'document') {
    cms_varnish_purge_related_meetings($node);
  }
  cms_varnish_purge_related_views($node);

  if (empty($node->nid) || $deleted) {
    return;
  }

  $urls = ['node/' . $node->nid];

  // Get url aliases.
  $urls = array_merge($urls, cms_varnish_get_url_aliases($urls));

  // Add homepage.
  $urls[] = '';

  cms_varnish_purge_urls($urls);
}

/**
 * Purge meeting pages.
 *
 * @param $node
 */
function cms_varnish_purge_related_meetings($node) {
  if ($node->type != 'document') {
    return;
  }
  $urls = [];
  $document_meetings = cms_varnish_get_document_meetings($node);
  if (!empty($document_meetings)) {
    foreach ($document_meetings as $document_meeting) {
      $urls[] = 'node/' . $document_meeting;
    }
  }
  $urls = array_merge($urls, cms_varnish_get_url_aliases($urls));
  cms_varnish_purge_urls($urls);
}

/**
 * Purge the views in which the node appears.
 *
 * @param $node
 */
function cms_varnish_purge_related_views($node) {
  $views = array(
    'meeting' => ['front_end_meetings', 'event_and_meetings_lists'],
    'country' => 'front_end_countries',
    'document' => 'front_end_documents',
    'project' => 'front_end_projects',
    'award' => 'front_end_awards',
    'campaign' => 'front_end_campaigns',
    'legal_instrument' => 'front_end_instruments',
    'news' => 'front_end_news',
    'publication' => 'front_end_publications',
    'species' => 'front_end_species',
    'working_group' => 'front_end_working_groups',
  );

  if (CMSUtils::get_current_profile() == 'aewa') {
    $views['legal_instrument'] = 'legal_instrument_listing';
  }

  $urls = [];

  if (!empty($views[$node->type])) {
    $urls = cms_varnish_get_display_urls($views[$node->type]);
  }

  cms_varnish_purge_urls($urls);
}

/**
 * Get all meetings for a document.
 *
 * @param $node
 *
 * @return array
 */
function cms_varnish_get_document_meetings($node) {
  $nid = $node->nid;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'meeting')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_meeting_document', 'target_id', $nid);

  $result = $query->execute();
  $meetings = [];
  if (!empty($node->field_document_meeting[LANGUAGE_NONE])) {
    $meetings = array_column($node->field_document_meeting[LANGUAGE_NONE], 'target_id');
  }
  if (!empty($result['node'])) {
    foreach ($result['node'] as $data) {
      $meetings[] = $data->nid;
    }
  }
  return array_unique($meetings);
}

/**
 * Get all url aliases for a list of paths.
 *
 * @param $urls
 *
 * @return array
 */
function cms_varnish_get_url_aliases($urls) {
  $url_aliases = array();
  $languages = language_list();
  // Compute the aliases in all languages
  if ($languages) {
    foreach ($languages as $language => $l) {
      foreach ($urls as $url) {
        $paths = explode('/', drupal_get_path_alias($url, $language));
        if ($paths) {
          foreach ($paths as $key => $path) {
            // Format the path to be compatible with Varnish.
            $paths[$key] = urlencode($path);
          }
          $url_aliases[] = implode('/', $paths);
        }
      }
    }
  }
  return $url_aliases;
}

/**
 * Get all subdomains.
 *
 * @return array
 */
function _cms_varnish_get_domain_paths() {
  $domain_paths = [];
  $domains = domain_list_by_machine_name();
  foreach ($domains as $domain => $settings) {
    $name = explode('/', $settings['subdomain']);
    if (empty($name[1])) {
      continue;
    }
    $domain_paths[] = $name[1];
  }
  return $domain_paths;
}

/**
 * Purge a list of urls.
 *
 * @param $urls
 *
 * @throws \Exception
 */
function cms_varnish_purge_urls($urls) {
  $output_urls = [];
  $purge_urls = [];
  $languages = language_list();
  $subdomains = _cms_varnish_get_domain_paths() + ['base' => ''];
  foreach ($urls as $url) {
    foreach ($subdomains as $subdomain) {
      $subdomain_url = $url;
      if ($subdomain != '') {
        $subdomain_url = "$subdomain/$url";
      }
      $purge_urls[] = $subdomain_url;
      $output_urls[] = t('URL: @url', ['@url' => check_url($subdomain_url)]);
      if ($languages) {
        foreach ($languages as $language => $l) {
          // Build urls for all languages.
          $purge_url = "$language/$url";
          if ($subdomain != '') {
            $purge_url = "$subdomain/$language/$url";
          }
          $purge_urls[] = $purge_url;
          // Build log details.
          $output_urls[] = t('URL: @url', ['@url' => check_url($purge_url)]);
        }
      }
    }
  }


  if ($purge_urls) {
    cms_varnish_purge($purge_urls);

    // Log debug message in watchdog.
    $message = t('Expiration was executed for the next URLs: !urls', array('!urls' => theme('item_list', array('items' => $output_urls))));
    watchdog('cms_varnish_purger', $message, array(), WATCHDOG_DEBUG);
  }
}

/**
 * Get the url of a view.
 *
 * @param $view_ids
 *
 * @return array
 */
function cms_varnish_get_display_urls($view_ids) {
  if (!is_array($view_ids)) {
    $view_ids = [$view_ids];
  }
  $urls = array();
  foreach ($view_ids as $view_id) {
    $view = views_get_view($view_id);
    $displays = $view->display;
    foreach ($displays as $display) {
      if (!empty($display->display_options['path'])) {
        $urls[] = $display->display_options['path'];
      }
    }
  }
  return $urls;
}

/**
 * Purge a list of urls.
 *
 * @param $urls
 */
function cms_varnish_purge($urls) {
  $host = _varnish_get_host();

  $drupal_full_urls = [];
  $varnish_full_urls = [];
  foreach ($urls as $url) {
    $drupal_full_urls = [
      "https://$host/$url/",
      "http://$host/$url/",
    ];
    if ($url == '') {
      $varnish_full_urls[] = '/';
    }
    else {
      $varnish_full_urls[] = "/$url/";
    }
  }
  // Clear drupal cache.
  db_delete('cache_page')
    ->condition('cid', $drupal_full_urls, 'IN')
    ->execute();
  cache_clear_all($drupal_full_urls, 'cache_page');

  // Clear varnish cache.
  _cms_varnish_purge_paths($host, $varnish_full_urls);
}


/**
 * Purge varnish cache.
 *
 * @param $host
 * @param array $paths
 */
function _cms_varnish_purge_paths($host, array $paths) {
  // Subtract the hostname length from the global length limit.
  // Note we use strlen() because we're counting bytes, not characters.
  $length_limit = variable_get('varnish_cmdlength_limit', 7500) - strlen($host);
  while (!empty($paths)) {
    // Construct patterns and send them to the server when they're full.
    $purge_pattern = '^';
    while (strlen($purge_pattern) < $length_limit && !empty($paths)) {
      $purge_pattern .= array_shift($paths) . '$|^';
    }
    // Chop the final "|^" off the string, leaving "$".
    $purge_pattern = substr($purge_pattern, 0, -2);
    // Remove extra slashes in beginning of URL.
    $purge_pattern = preg_replace('#/+#', '/', $purge_pattern);
    // Submit this purge chunk.
    varnish_purge($host, $purge_pattern);
  }
}

/**
 * Implements hook_flush_caches().
 *
 * Called from update.php (among others) to flush the caches.
 */
function cms_varnish_flush_caches() {
  if (function_exists('memcache_storage_flush_all_cache')) {
    memcache_storage_flush_all_cache();
  }
  if (function_exists('varnish_purge_all_pages')) {
    varnish_purge_all_pages();
  }
  $db = new DrupalDatabaseCache('cache_page');
  $db->clear();
  return array();
}
