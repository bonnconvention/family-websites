<?php
/**
 * @file
 * Code for the
 *
 * @author Dragos Dumitrescu
 *
 */

module_load_include('inc', 'cms_feed_import', 'cms_feed_import.admin');

/**
 * Implements hook_menu().
 */
function cms_feed_import_menu() {
    $items = array();
    $items['admin/config/content/cms_feed_import'] = array(
        'title' => 'CMS Feed Import',
        'description' => 'CMS Feed Import config',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cms_feed_import_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );
    $items['cms_feed_import/process'] = array(
        'page callback' => 'cms_feed_import_node_import_callback',
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );
    return $items;
}

/**
 * Implements hook_form_alter().
 */
function cms_feed_import_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#node_edit_form']) && isset($form['field_featured_in_instances'])) {
    $form['actions']['submit']['#submit'][] = 'cms_feed_import_node_save_submit';
    if (isset($form['field_imported'])) {
      $form['field_imported']['#attributes']['class'][] = 'hide';
    }
  }
}

/**
 * Callback for node edit form submit.
 */
function cms_feed_import_node_save_submit($form, &$form_state) {
    cms_feed_import_form_trigger_source($form_state['node']);
}

/**
 * Implements hook_cron
 */
function cms_feed_import_cron(){
    if (time() >= variable_get('cms_feed_import_next_execution', 0)) {
        cms_feed_import_node_import(TRUE);
        cms_feed_import_set_interval();
    }
}

/**
 * Callback for menu hook to trigger import.
 */
function cms_feed_import_node_import_callback() {
  $common_key = variable_get('common_key');
  $param = drupal_get_query_parameters();
  watchdog('cms_feed_import', 'Import remotely triggered');
  if (isset($param['key']) && $param['key'] == $common_key) {
    cms_feed_import_node_import(TRUE);
  }
}

/**
 * Triggers the import on a remote source.
 */
function cms_feed_import_form_trigger_source($node) {
  $bundle = variable_get('cms_feed_import_bundle', "news");
  $urls = variable_get('cms_feed_import_url', array());
  $common_key = variable_get('common_key');
  if (!empty($urls) && $bundle == $node->type
      && empty($node->field_imported[LANGUAGE_NONE][0]['value'])
      && !empty($node->field_featured_in_instances[LANGUAGE_NONE][0])) {
    foreach ($urls as $url) {
      if (valid_url($url, TRUE)) {
        $path = parse_url($url);
        $target_url = $path['scheme'] . '://' . $path['host'] . '/cms_feed_import/process';
        $options = array(
          'query' => array(
            'key' => $common_key,
          )
        );
        entity_get_controller('node')->resetCache(array($node->nid));
        drupal_http_request(url($target_url, $options), array('timeout', 90));
      }
    }
  }
}

/**
 * Executes Import for all URLs.
 */
function cms_feed_import_node_import($cron = FALSE, $urls = array(), $bundle = ''){
    if (empty($urls)) {
        $bundle = variable_get('cms_feed_import_bundle', "news");
        $urls = variable_get('cms_feed_import_url', array());
    }
    $saves = 0;
    if (!empty($urls)) {
        foreach ($urls as $url) {
            if (!empty($url)) {
                $saves += cms_feed_import_execute($url, $bundle);
            }
        }
    }
    if (!$cron) {
        drupal_set_message($saves .' nodes saved');
        drupal_goto('admin/config/content/cms_feed_import');
    }
    cms_feed_import_set_interval();
}

/**
 * Sets the next interval for import.
 */
function cms_feed_import_set_interval() {
    $interval = variable_get('cms_feed_import_cron_interval', 360);
    variable_set('cms_feed_import_next_execution', time() + $interval);
}

/**
 * Validates the date aginst specific date format.
 */
function cms_validate_date_time($dateStr, $format) {
  date_default_timezone_set('UTC');
  $date = DateTime::createFromFormat($format, $dateStr);
  return $date && ($date->format($format) === $dateStr);
}
/**
 * Format the fields for node_save.
 */
function cms_normalize_field (&$node_data, $key_field, $language = LANGUAGE_NONE,  $nested = false) {
  if (!isset($node_data[$key_field]) || empty($node_data[$key_field])) {
    return true;
  }
  if ($nested) {
    $node_data[$key_field] = [
      $language => [
        $node_data[$key_field],
      ],
    ];
    return true;
  }
  $node_data[$key_field] = [
    $language => $node_data[$key_field],
  ];
}

/**
 * Executes import from an url.
 */
function cms_feed_import_execute($url, $bundle) {
    $path = parse_url($url);
    $base_path = $path['scheme'] . '://' . $path['host'];
    $import = new CMSFeedImport($url, $bundle);
    $import->call_feed();
    $result = $import->get_result();
    $result = json_decode($result, TRUE);
    $saves = 0;

    $fields_info = field_info_instances("node", $bundle);
    $fields_image = array();
    $fields_file = array();
    $fields_entity_ref = array();
    $fields_term_ref = array();
    $fields_generic_info = array();
    $standard_fields = array();

    //Get bundle field infos
    foreach ($fields_info as $field_name => $field) {
        $fields_generic_info[$field_name] = field_info_field($field_name);
        switch ($fields_generic_info[$field_name]['type']) {
            case 'image':
                $fields_image[$field_name]= $field_name;
                break;
            case 'file':
                $fields_file[$field_name]= $field_name;
                break;
            case 'entityreference':
                $fields_entity_ref[$field_name]= $field_name;
                break;
            case 'taxonomy_term_reference':
                $fields_term_ref[$field_name] = $field_name;
                break;
            default:
                $standard_fields[$field_name] = $field_name;
        }
    }

    //Check trough received data
    foreach ($result as $node_data) {
      $query = new EntityFieldQuery();
      $nodes = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $bundle)
        ->propertyCondition('uuid', $node_data['uuid'])
        ->execute();

      //get languages that has data
      $languages = language_list();
      $node_languages = array();
      foreach ($node_data as $key_field => $field) {
          if(is_array($field)) {
              foreach($field as $key => $value){
                  if(array_key_exists($key, $languages)) {
                      $node_languages[$key] = $key;
                  }
              }
          }

          // Make sure the title is decoded.
          $node_data['title'] =  htmlspecialchars_decode($node_data['title'], ENT_QUOTES);

          // Normalize $standard_fields.
          if (in_array($key_field, $standard_fields)) {

            switch ($key_field) {
              case 'body':
                cms_normalize_field ($node_data, $key_field, $node_data['language'],  true);
                break;

              case 'field_news_expiration_date':
              case 'field_source_url':
              case 'field_in_slideshow':
              case 'field_featured_in_instances':
                cms_normalize_field ($node_data, $key_field, LANGUAGE_NONE,  true);
                break;

              case 'field_news_further_resources':
                cms_normalize_field ($node_data, $key_field, LANGUAGE_NONE,  false);
                break;

              case 'field_keywords':
                cms_normalize_field ($node_data, $key_field, $node_data['language'],  false);
                break;

              default:
                break;
            }
          }

          // Normalize $fields_term_ref && $fields_entity_ref.
          if (in_array($key_field, $fields_term_ref) || in_array($key_field, $fields_entity_ref)) {
            cms_normalize_field ($node_data, $key_field, LANGUAGE_NONE, !is_array($field));
          }

          // Normalize $fields_file && $fields_image.
          if (in_array($key_field, $fields_file) || in_array($key_field, $fields_image)) {
            if (empty($field)) {
              $node_data[$key_field] = array();
            }
            else {
              if (is_array($field)) {
                if ($fields_generic_info[$key_field]['cardinality'] == 1) {
                  $node_data[$key_field]['url'] = str_replace('public://', $base_path . '/sites/default/files/', $field['uri']);
                  cms_normalize_field ($node_data, $key_field, $node_data['language'], true);

                }
                else {
                  foreach ($field as $kf => $f) {
                    $node_data[$key_field][$kf]['url'] = str_replace('public://', $base_path . '/sites/default/files/', $f['uri']);
                  }
                  cms_normalize_field ($node_data, $key_field, $node_data['language'], false);
                }
              }
              else {
                $node_data[$key_field]['url'] = str_replace('public://', $base_path . '/sites/default/files/', $field['uri']);
                cms_normalize_field ($node_data, $key_field, $node_data['language'], true);
              }
            }
          }
        }

      $current_node = array();
      //if new
      if (empty($nodes)) {
          unset($node_data['nid']);
      } else {
          $current_node = node_load(current($nodes['node'])->nid);
          $node_data['nid'] = $current_node->nid;
      }

      //if new or modified, we have to save it
      if (empty($nodes) ||
        (!empty($current_node) && $current_node->changed < $node_data['changed'])) {
          $node_data['type'] = $bundle;

          $node = (object) $node_data;

          //Parse image fields
          foreach ($fields_image as $field_image) {
              if (!empty($node->{$field_image})) {
                  foreach ($node->{$field_image} as $lang => $images) {
                      foreach ($images as $idx => $image) {
                          $f_img = (array) CMSFeedImport::saveFile(
                            $image['url'],
                            'public://' . $fields_info[$field_image]['settings']['file_directory']
                          );
                          if (isset($image['image_field_caption'])) {
                            $f_img['image_field_caption'] = $image['image_field_caption'];
                          }
                          $node->{$field_image}[$lang][$idx] = $f_img;
                      }
                  }
              }
          }

          //Parse File fields
          foreach ($fields_file as $field_file) {
              if (!empty($node->{$field_file})) {
                  foreach ($node->{$field_file} as $lang => $files) {
                      foreach ($files as $idx => $file) {
                          $f_file = (array) CMSFeedImport::saveFile(
                            $file['url'],
                            'public://' . $fields_info[$field_file]['settings']['file_directory']
                          );
                          $f_file['description'] = $file['description'];
                          $f_file['display'] = $file['display'];
                          $node->{$field_file}[$lang][$idx] = $f_file;
                      }
                  }
              }
          }

          //Parse Term ref fields
          foreach ($fields_term_ref as $field_term_ref) {
              if (!empty($node->{$field_term_ref})) {
                  $voc = $fields_generic_info[$field_term_ref]['settings']['allowed_values'][0]['vocabulary'];
                  $field_values = array();
                  foreach ($node->{$field_term_ref} as $lang => $terms) {
                      foreach ($terms as $term) {
                          $current_term = taxonomy_get_term_by_name($term, $voc);
                          if (!empty($current_term)) {
                              $field_values[$lang] []= array('tid' => current($current_term)->tid);
                          }
                      }
                  }
                  $node->{$field_term_ref} = $field_values;
              }
          }

          //Parse Entity ref fields
          foreach ($fields_entity_ref as $field_entity_ref) {
            if(!empty($node->{$field_entity_ref})) {
              $field_values = array();
              foreach ($node->{$field_entity_ref} as $lang => $ent_ref) {
                foreach($ent_ref as $target_title) {
                  $query = new EntityFieldQuery();
                  $target_nodes = $query->entityCondition('entity_type', 'node')
                    ->entityCondition('bundle', $fields_generic_info[$field_entity_ref]['settings']['handler_settings']['target_bundles'])
                    ->propertyCondition('title', $target_title)
                    ->range(0,1)
                    ->execute();
                  if (!empty($target_nodes['node'])) {
                      $field_values[$lang] []= array('target_id' => current($target_nodes['node'])->nid);
                  }
                }
              }
              $node->{$field_entity_ref} = $field_values;
            }
          }
          $node->uid = 1;
          $node->field_imported[LANGUAGE_NONE][0]['value'] = 1;
          // We are waiting the date in this format: Y-m-d H:i
          if (isset($node->created) && cms_validate_date_time($node->created, 'Y-m-d H:i')) {
            $node->date = $node->created;
          }

          $node = node_submit($node);

          //Get properties from existing node
          if (!empty($current_node)) {
            $node_array = (array) $node;
            $diff = CMSFeedImport::arrayRecursiveDiff((array) $current_node, $node_array);
            $node = (object) array_merge($diff, $node_array);
          }

        //set Translations
        foreach($node_languages as $language) {
          if ($language == $node->language) {
              continue;
          }

          $handler = entity_translation_get_handler('node', $node, TRUE);
          $handler->initTranslations();

          $translation = array(
            'language'  => $language,
            'source'    => $node->language,
            'status'    => 1,
            'translate' => 0
          );

          $handler->setTranslation($translation, $node);
        }

        // Replace images src and a href with absolute url from source.
        foreach ($node->body as $lang => $body) {
          $html = $node->body[$lang][0]['value'];
          $html = preg_replace('/src="\/(.*?)"/', 'src="'. $base_path .'/\1"', $html);
          $html = preg_replace('/href="\/(.*?)"/', 'href="'. $base_path .'/\1"', $html);
          $node->body[$lang][0]['value'] = $html;
        }
        $node->path['pathauto'] = TRUE;

        node_save($node);
        watchdog('cms_feed_import', $node->title . ' saved!');
        $saves ++;
      }
    }
    watchdog('cms_feed_import', 'Imported '.$saves .' nodes', NULL, WATCHDOG_DEBUG, $url);
    return $saves;
}

class CMSFeedImport {
    public $url;
    public $bundle;
    protected $result = false;

    public function __construct($url, $bundle){
        $this->url = $url;
        $this->bundle = $bundle;
    }

    public function call_feed($parameters = array(), $headers = array(), $method = 'GET') {
        $url = $this->url;
        watchdog('cms_feed_import', 'Called remote web service', NULL, WATCHDOG_DEBUG, $url);
        $headers = array_merge(array(
            'Accept' => 'application/json',
        ), $headers);

        $p = array();
        foreach($parameters as $k => $v) {
            $p[] = $k . '=' . $v; // TODO: Escape?
        }
        $options = array(
            'headers' => $headers,
            'method' => $method,
            'data' => implode('&', $p)
        );
        $ret = drupal_http_request($url, $options);
        if($ret->code != 200) {
            drupal_set_message(t(
                    'Unable to get service data from @url (err_code: @code)',
                    array('@url' => $url, '@code' => $ret->code)),
                'error');
            return FALSE;
        }
        $this->result = $ret->data;
        return $ret;
    }

    public function get_result(){
        return $this->result;
    }

    /**
     * Downloads and saves a file in a field
     *
     * @param mixed $field
     *   A string or an array of strings
     * @param string $path
     *   Where to save file. Default is public://
     * @param int $options
     *   Use 0 to rename existing file or 1 to replace it.
     *
     * @return mixed
     *   An object or an array of objects containing file info
     */
    public static function saveFile($field, $path = 'public://', $options = FILE_EXISTS_RENAME) {
        if (is_array($field)) {
            foreach ($field as &$f) {
                $f = self::saveFile($f, $path, $options);
            }
            return $field;
        }
        // Get file data.
        try {
            $image = file_get_contents($field);
        }
        catch (Exception $e) {
            return NULL;
        }
        $field = trim($field, '/');
        $field = drupal_substr($field, strrpos($field, '/') + 1);
        if (file_prepare_directory($path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
            return file_save_data($image, $path .DIRECTORY_SEPARATOR. $field, (int) $options);
        }
        return NULL;
    }

  public static function arrayRecursiveDiff($array1, $array2) {
    $return = array();

    foreach ($array1 as $key => $value) {
      if (array_key_exists($key, $array2)) {
        if (is_array($value)) {
          $diff = self::arrayRecursiveDiff($value, $array2[$key]);
          if (count($diff)) { $return[$key] = $diff; }
        } else {
          if ($value != $array2[$key]) {
            $return[$key] = $value;
          }
        }
      } else {
        $return[$key] = $value;
      }
    }
    return $return;
  }
}
